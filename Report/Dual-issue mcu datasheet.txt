Dual-issue mcu datasheet
### Features:
- High performance with dual-issue
- System Clock up to 39MHz (Depended on LUTs technology of Xilinx FPGA)
- RISC Architecture
	+ 34 instructions - most single-clock execution
	+ 32 general purpose register 
- Memory:
	+ 1Kb of Data-memory (SRAM)
	+ 8Kb of Program-memory (SRAM)
- All Features:
	+ One 16-bit Timer/Counter with separate prescaler, compare mode
	+ One external interrupt 
	+ One internal interrupt 
	+ Two UART peripheral 
	+ One SPI peripheral 
	+ One I2C peripheral
	+ 16 general purpose input-output
	
1. Pin Configurations:
* Pinout 
	<image: PinOut.png>

1.1 Pin Description:
1.1.1. VCC 
1.1.2. GND
1.1.3 Port A (PA0:7): External Interrupt
	+ Port A is an 8bit bidirectional IO port, with 1 external-interrupt pin 
1.1.4 Port B (PB0:7)
	+ Port B is an 8bit bidirectional IO port
1.1.5 Periperhal Port:
	+  Peripehral Port consists of 2 UART peripheral

2. Overview

2.1 Block Diagram

- Dual-issue microcontroller is a 64-bit risc-v microntroller with dual-issue and 39MHz syttem-clock
- Dual-issue cores have 2 32-general-purpose-register set, so there are not depended on another in Execution stage (exception Data-hazard case)
- Dual-issue microcontroller provides th feature: 8Kb Program-memory (SRAM), 1Kb Data-memory (SRAM), 16 Gernal purpose I/O, dual-issure, UART periperhal, SPI peripheral (not complete), I2C periperhal (not complete), external interrupt and timer/counter. 
- Additionally, Data memory has Read-while-write mechanism, 2 read-handler to support 2 issue-core. Program memory has "half" alignment mechanism to fetch 2 instructions at the same time.

	Figure: Block diagram
	<image: BlockDiagram.png>



3. IDE:
- In this datasheet, we will provide some example code to use or configure peripherals and hardware-components via assembly code

	<link: Assembler and Program Device>

4. Central Processing Unit

a. Overview
The CPU is able to access data-memory, calculate, control peripherals and handle interrupts with dual issure core.

The CPU uses Havard architecture. Instructions are executed with multi-cycle pipeline (2-stage & dual isssue). Program processor is multi-cycle-clock processor and processes Instruction Fetch stage
(consist of Instruction Fetch + Interrupt Detect + Instruction Dispath). Two Issue processor is multi-cycle-clock processor and processes Execution stage (consist of Execution + Data Memory Access + Write Back)

	<Image: CPU.png>


Instructions set consist of arithmetic instruction, logical instruction, conditional-jump instruction, unconditional-jump instruction, data-transfer instruction and some system instruction (hardware supportive instruction).

When Program processor acknowledge interrupt flag is high (from Interrupt Controller) in Interrupt-detect state, Program processor will store current PC to internal stack buffer (It's not Data memory -> reduce clock-cycle when Processor access Data memory)

Data memory consist of some memory space for Data memory space, Peripheral memory space, GPIO memory space. Users can use data-transfer instructions to configure or use them 


b. ALU 
- The ALU (in a single issue) is connected to 32 GPRs directly. 
- Have 2 types of calculation 
	+ single-cycle calculation
	+ multi-cycle calculation (for multiplication arithmetic)
- Have 3 categories:
	+ Arithmetic (without division)
	+ Logical
	+ Bit-function 

c. General purpose registers
- 32 general purpose registers (GPRs) are 64-bit registers
- Caution: Data in registers is not restored when program enter interrupt service routine. Therefore, the user or compiler must add restored-and-recovery steps like calling procedure to ISR memory space

	<Image: GeneralPurposeRegisters.png>

- Register description
+ Stack pointer (x2 - 0xF0 is initial value)
	- To store the address of stack space in Data memory
+ Global pointer register (x3 - 0x2B is initial value)
	- To store the address of global data space in Data memory

+ Instruction execution timing
  _1 square block - 1 clock cycle_

	- Without interrupt case and jump case 
	Figure 1: Wort case (4 Load-instructions) 

	<image: WorstExecInstCase.png>

	
	Figure 2: Best case (4 1-cycle-arithmetic-instructions)

	<image: BestExecInstCase.png>

5. Memories
- This microcontroller has 2 main memory spaces, the data memory and the program memory. And both of them are SRAM

5.1. SRAM Data memory
	i. Memory Map 
	<image: DataMemory_overview.png>

	ii. Access Time
	- Data memory has 2 read-handler and 1 write-handler. when CPU put address to address_port, Address will be valid after 1 cycle clock
		
5.2. I/O & Peripheral Memory 
- Peripherals and I/Os in dual-issue microcontroller are accessed and configured via Data Memory. Data package is available for Byte size (without protocol peripheral), Word size, Double-word size. CPU use general purpose registers to transfer or receive data from peripherals or I/Os (More detail in later section)

5.3. General Purpose I/O Registers:
- The Dual-issue microcontroller has 2 configuration registers to configure state of GPIO and 2 registers to set the value of the output state.

5.4. Register Description
- All configuration registers are placed from 0x00 to 0x10 in Data memory.

5.4.1. GPIO Port A - General Purpose I/O Configuration Register 1
	<image: configRegister_PORTA>
5.4.2. GPIO Port B - General Purpose I/O Configuration Register 1
	<image: configRegister_PORTB.png>
5.4.3. UART RX 1 - UART RX 1 Configuration Register
	<image: configRegister_RX1.png>
5.4.4. UART TX 1 - UART TX 1 Configuration Register
	<image: configRegister_TX1.png>
5.4.5. Comunication peripheral - Comunication peripheral Configuration Register
	<image: configRegister_COM_PERIPHERAL.png>
5.4.6. UART RX 2 - UART RX 2 Configuration Register
	<image: configRegister_RX2.png>
5.4.7. UART TX 2 - UART TX 2 Configuration Register
	<image: configRegister_RX2.png>
5.4.8. SPI - SPI Configuration Register
	<image: configRegister_SPI.png>

5.4.9. I2C - I2C Configuration Register
	<image: configRegister_I2C.png>

5.4.10. EXT INT - External Interrupt Configuration Register
	<image: configRegister_ExternalInterrupt.png>

5.4.11. TIM INT - Timer Interrupt Configuration Register
	<image: configRegister_TimerInterrupt.png>

5.4.12. TIM LIM - Timer Limit Configuration Register
	<image: configRegister_TimerLimit.png>

6. Interrupts:
The Dual-issue microcontroller has External Interrupt, Timer Interrupt and Reset Interrupt

 _Caution_: User must boot Reset Program to Program memory (Recovery Stack pointer - Disable Reset Interrupt - Jump to 0xC0)

The ISR of each interrupt is placed on top of the Program memory. Each Routine can contain up to 16 instructions

<image: InterruptRoutineAddress.png>

7. External Interrupt:
7.1. Overview
The external interrupt is triggered by PA2 pin. The interrupt is triggered when PA2 is configured as Output or Input mode. 

Users can configure sense of external interrupt (rising edge, falling edge, pin-change).

Additionally, the dual-issue microcontroller provides debounce mechanism for external interrupt
7.2. Register Description:
7.2.1. External Interrupt Register

	<image: configRegister_ExternalInterrupt>

	* Bit 7: External Interrupt Enable
	Enable request of External Interrupt to Interrupt Controller (IC)
	* Bit 6 - 5: Sense Control
	<image: ExternalInterrupt_SenseControl.png>

	* Bit 4: Debounce option
	Enable/Disable debounce for interrupt pin

	+ Bit 3 - 0: Reserved

8. General-Purpose I/O

8.1. Overview
The dual-issue microcontroller provides digital 16 I/O pins. Users can configure the state of pins via GPIO registers.

8.2. Block Diagram
	<image: GPIO_BlockDiagram.png>


8.3. Configuring the Pin 
Each port pin consists of 2 register bits: PORTx and PIN_BUFx. 

The PORTx bits are accessed at 0x00 - 0x01 (shown in Section 5.4 "Register Description") to set state of PINx. "0" value is the output and "1" value is the input.

The PIN_BUFx bits are accessed from 0x40000000000000 to 0x40000000000001 to set value of output state. "0" value is LOW (0.0v) and "1" value is HIGH (3.3v)

8.4. Assembly Code Example:

8.4.1 Reading/Writing pin value:

The following code example shows how to set port B pin 7, 5 HIGH and 6, 4 LOW as output state. Set pin 3, 2, 1, 0 as input state, then read pin value from pin 3, 0

// Configure pin state
ADDI x9, x0, 8'b11110000	// Set PB[7:4] as Input state and PB[3:0] as Output state
SB   x9, 1(x0)			// Load configuration data to Configuration register

// Set up address mapping value
LUI  x10, 0x40000		// Address mapping to GPIO Channel
ADDI x10, x10, 1		// Address mapping to PORT B

// Write pin value
LB   x11, 0(x10) 		// Restore some unchanged value
ORI  x11, x11, 8'b10100000	// Mask value (set pin 7 and pin 5 HIGH)
ANDI x11, x11, 8'b10101111	// Mask value (set pin 6 and pin 4 LOW)
SB   x11, 0(x10)		// Write pin value to pin buffer

// Read pin value (Read pin0's value to LSB of x13 and pin3's value to LSB of x14)
LB   x12, 0(x12)		// Read pin value
ADD  x13, x12, 0		// Move data from x12 to x13
ANDI x13, x13, 0x01		// Clear others bit
ADD  x14, x12, 0		// Move data from x12 to x14
SRL  x14, x14, 3		// Move pin3's value to LSB of x14
ANDI x14, x14, 0x01		// Clear others bit

8.5 Alternate Port Functions:
(Update later)

9. 16-bit Timer/Counter:
9.1. Features:
	* Clear timer when comparing math automatically
	* Counter width is up to 16-bit
9.2. Overview:


